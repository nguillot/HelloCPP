apply plugin: 'com.android.model.application'

model {

    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 23
            applicationId "nicolas.guillot.hellocpp"
            versionCode 1
            versionName "1.0"
        }

        buildTypes {
            debug {}
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }

        ndk {
            moduleName = "FakeLib"
            toolchain = "clang"
            toolchainVersion = "3.5"
            stl = "c++_shared"

            ldLibs.add("atomic")
            ldLibs.add("android")
            ldLibs.add("log")

            cppFlags.add("-I${file("${projectDir}/../nativelibrary/src/main/jni/cpp/public")}".toString())
            cppFlags.add("-I${file("${projectDir}/../nativelibrary/src/main/jni/jni/public")}".toString())

            abiFilters.addAll(["arm64-v8a"]) //["armeabi", "armeabi-v7a", "x86", "arm64-v8a"]) //filtering ABIs to reduce the compile time
        }
    }
}

// call regular ndk-build(.cmd) script from app directory
task cmakeBuild(type: Exec) {
    commandLine "${projectDir}/../nativelibrary/src/main/jni/scripts/build_android.sh"
}

task ndkExport(type: Copy, dependsOn: cmakeBuild) {
    from '../nativelibrary/src/main/jni/libs'
    into 'src/main/jniLibs'
    include '**/*.so'
    //exclude '**/libc++_shared.so'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkExport
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile project(':nativelibrary')
}
